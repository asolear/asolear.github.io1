{"version":3,"file":"static/js/14675.21b04d83.chunk.js","mappings":"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","sources":["components/zExcelUploaderStorage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n    Button,\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Link,\n    IconButton,\n} from \"@mui/material\";\nimport * as XLSX from \"xlsx\";\nimport TuneIcon from '@mui/icons-material/Tune';\n\nconst ExcelUploaderStorage = ({ open, handleOpen, handleClose }) => {\n    const [sheets, setSheets] = useState(null);\n    const [dragOver, setDragOver] = useState(false);\n\n    const handleFileUpload = (file) => {\n        if (!file) return;\n\n        // Limpia la clave 'excelData' de sessionStorage\n        sessionStorage.removeItem(\"excelData\");\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n            const sheetsData = {};\n\n            // Procesar cada hoja y convertirla en JSON\n            workbook.SheetNames.forEach((sheetName) => {\n                const sheet = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                    header: 1, // Mantiene la primera fila como encabezados\n                });\n\n                // Filtrar filas vacías\n                const filteredSheet = sheet.filter((row) =>\n                    row.some((cell) => cell !== null && cell !== undefined && cell !== \"\")\n                );\n\n                sheetsData[sheetName] = filteredSheet;\n            });\n\n            // Guardar los datos procesados en el estado y en sessionStorage\n            setSheets(sheetsData);\n            sessionStorage.setItem(\"excelData\", JSON.stringify(sheetsData));\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    const handleInputChange = (event) => {\n        const file = event.target.files[0];\n        handleFileUpload(file);\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault();\n        setDragOver(true);\n    };\n\n    const handleDragLeave = () => {\n        setDragOver(false);\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setDragOver(false);\n        const file = event.dataTransfer.files[0];\n        handleFileUpload(file);\n    };\n\n    return (\n        <Box sx={{ p: 2 }}>\n\n\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\n                <DialogTitle>Subir archivo Excel de parámetros</DialogTitle>\n                <DialogContent>\n                    <Box\n                        sx={{\n                            mt: 2,\n                            p: 2,\n                            border: \"2px dashed\",\n                            borderColor: dragOver ? \"primary.main\" : \"grey.400\",\n                            borderRadius: 2,\n                            textAlign: \"center\",\n                            backgroundColor: dragOver ? \"grey.100\" : \"transparent\",\n                        }}\n                        onDragOver={handleDragOver}\n                        onDragLeave={handleDragLeave}\n                        onDrop={handleDrop}\n                    >\n                        <Typography variant=\"body1\" gutterBottom>\n                            Arrastra y suelta tu archivo aquí o selecciona uno manualmente\n                        </Typography>\n                        <Button variant=\"contained\" component=\"label\">\n                            Seleccionar Archivo\n                            <input\n                                type=\"file\"\n                                hidden\n                                accept=\".xlsx, .xls\"\n                                onChange={handleInputChange}\n                            />\n                        </Button>\n                    </Box>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"body2\">\n                            ¿Necesitas una plantilla? Descárgala haciendo clic\n                            <Link href=\"/plantillasParametros/caes.xlsx\" download sx={{ ml: 1 }}>\n                                aquí\n                            </Link>\n                            .\n                        </Typography>\n                    </Box>\n                    {sheets && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle1\">Hojas procesadas:</Typography>\n                            <ul>\n                                {Object.keys(sheets).map((sheetName) => (\n                                    <li key={sheetName}>{sheetName}</li>\n                                ))}\n                            </ul>\n                        </Box>\n                    )}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n};\n\nexport default ExcelUploaderStorage;\n"],"names":["_ref","open","handleOpen","handleClose","sheets","setSheets","useState","dragOver","setDragOver","handleFileUpload","file","sessionStorage","removeItem","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","XLSX","type","sheetsData","SheetNames","forEach","sheetName","filteredSheet","sheet_to_json","Sheets","header","filter","row","some","cell","undefined","setItem","JSON","stringify","readAsArrayBuffer","_jsx","Box","sx","p","children","_jsxs","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","mt","border","borderColor","borderRadius","textAlign","backgroundColor","onDragOver","event","preventDefault","onDragLeave","handleDragLeave","onDrop","dataTransfer","files","Typography","variant","gutterBottom","Button","component","hidden","accept","onChange","Link","href","download","ml","Object","keys","map","DialogActions","onClick","color"],"sourceRoot":""}