{"version":3,"file":"static/js/21041.90d5486e.chunk.js","mappings":"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","sources":["Informes/formulario/zExcelUploaderStoragePrecargaxDefecto copy 2.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Button,\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Link,\n} from \"@mui/material\";\nimport * as XLSX from \"xlsx\";\n\nconst ExcelUploaderStorage = ({ open, handleClose }) => {\n    const [sheets, setSheets] = useState(null); // Datos finales confirmados\n    const [tempSheets, setTempSheets] = useState(null); // Datos cargados temporalmente\n    const [dragOver, setDragOver] = useState(false);\n\n    // Cargar datos desde sessionStorage al inicio\n    useEffect(() => {\n        const storedData = sessionStorage.getItem(\"excelData\");\n        if (storedData) {\n            setSheets(JSON.parse(storedData));\n        }\n    }, []);\n\n    const handleFileUpload = (file) => {\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n            const sheetsData = {};\n\n            workbook.SheetNames.forEach((sheetName) => {\n                const sheet = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                    header: 1,\n                });\n\n                const filteredSheet = sheet.filter((row) =>\n                    row.some((cell) => cell !== null && cell !== undefined && cell !== \"\")\n                );\n\n                sheetsData[sheetName] = filteredSheet;\n            });\n\n            setTempSheets(sheetsData); // Solo guarda los datos en un estado temporal\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    const handleInputChange = (event) => {\n        const file = event.target.files[0];\n        handleFileUpload(file);\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault();\n        setDragOver(true);\n    };\n\n    const handleDragLeave = () => {\n        setDragOver(false);\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setDragOver(false);\n        const file = event.dataTransfer.files[0];\n        handleFileUpload(file);\n    };\n\n    const handleConfirm = () => {\n        if (tempSheets) {\n            setSheets(tempSheets); // Actualiza los datos finales confirmados\n            sessionStorage.setItem(\"excelData\", JSON.stringify(tempSheets)); // Guarda en sessionStorage\n        }\n        setTempSheets(null); // Limpia los datos temporales\n        handleClose();\n        window.location.reload(); // Recarga la página\n    };\n\n    const handleCancel = () => {\n        setTempSheets(null); // Limpia los datos temporales\n        handleClose(); // Cierra el diálogo\n    };\n\n    return (\n        <Box sx={{ p: 2 }}>\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\n                <DialogTitle>Subir archivo Excel de parámetros</DialogTitle>\n                <DialogContent>\n                    <Box\n                        sx={{\n                            mt: 2,\n                            p: 2,\n                            border: \"2px dashed\",\n                            borderColor: dragOver ? \"primary.main\" : \"grey.400\",\n                            borderRadius: 2,\n                            textAlign: \"center\",\n                            backgroundColor: dragOver ? \"grey.100\" : \"transparent\",\n                        }}\n                        onDragOver={handleDragOver}\n                        onDragLeave={handleDragLeave}\n                        onDrop={handleDrop}\n                    >\n                        <Typography variant=\"body1\" gutterBottom>\n                            Arrastra y suelta tu archivo aquí o selecciona uno manualmente\n                        </Typography>\n                        <Button variant=\"contained\" component=\"label\">\n                            Seleccionar Archivo\n                            <input\n                                type=\"file\"\n                                hidden\n                                accept=\".xlsx, .xls\"\n                                onChange={handleInputChange}\n                            />\n                        </Button>\n                    </Box>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"body2\">\n                            ¿Necesitas una plantilla? Descárgala haciendo clic\n                            <Link href=\"/plantillasParametros/caes.xlsx\" download sx={{ ml: 1 }}>\n                                aquí\n                            </Link>\n                            .\n                        </Typography>\n                    </Box>\n                    {tempSheets && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle1\">Hojas procesadas:</Typography>\n                            <ul>\n                                {Object.keys(tempSheets).map((sheetName) => (\n                                    <li key={sheetName}>{sheetName}</li>\n                                ))}\n                            </ul>\n                        </Box>\n                    )}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCancel} color=\"secondary\">\n                        Cancelar\n                    </Button>\n                    <Button onClick={handleConfirm} color=\"primary\">\n                        Confirmar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n};\n\nexport default ExcelUploaderStorage;\n"],"names":["_ref","open","handleClose","sheets","setSheets","useState","tempSheets","setTempSheets","dragOver","setDragOver","useEffect","storedData","sessionStorage","getItem","JSON","parse","handleFileUpload","file","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","XLSX","type","sheetsData","SheetNames","forEach","sheetName","filteredSheet","sheet_to_json","Sheets","header","filter","row","some","cell","undefined","readAsArrayBuffer","_jsx","Box","sx","p","children","_jsxs","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","mt","border","borderColor","borderRadius","textAlign","backgroundColor","onDragOver","event","preventDefault","onDragLeave","handleDragLeave","onDrop","dataTransfer","files","Typography","variant","gutterBottom","Button","component","hidden","accept","onChange","Link","href","download","ml","Object","keys","map","DialogActions","onClick","handleCancel","color","handleConfirm","setItem","stringify","window","location","reload"],"sourceRoot":""}