{"version":3,"file":"static/js/18233.e63f558d.chunk.js","mappings":"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","sources":["Informes/api/AA.jsx","Informes/api/zExcelUploaderStorage.jsx","components/configURL.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"../../components/firebase/firebaseConfig\";\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button, Typography, Box, IconButton } from \"@mui/material\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport { toast } from \"react-toastify\";\nimport { useDropzone } from \"react-dropzone\";\nimport axios from \"axios\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport TuneIcon from \"@mui/icons-material/Tune\";\nimport * as pdfjsLib from \"pdfjs-dist\";\nimport ExcelUploaderStorage from \"./zExcelUploaderStorage\";\nimport config from '../../components/configURL';\n\n// Configuración de pdf.worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `/workers/3.11.174/pdf.worker.min.js`;\nconst ENDPOINT = \"B_DEVUELVE_PDF_CAMPO_RELLENO\"\n// URL de la API (evitando caché)\nconst PDF_API_URL = `${config.API_URL}/${ENDPOINT}?timestamp=${new Date().getTime()}`;\n\n\n// Hook personalizado para detectar cambios en sessionStorage\nconst useSessionStorageListener = (key) => {\n    const [trigger, setTrigger] = useState(0);\n\n    useEffect(() => {\n        const handleStorageChange = () => {\n            setTrigger((prev) => prev + 1);\n        };\n\n        // Sobrescribir el método setItem de sessionStorage\n        const originalSetItem = sessionStorage.setItem;\n        sessionStorage.setItem = function (...args) {\n            originalSetItem.apply(this, args);\n            if (args[0] === key) {\n                handleStorageChange();\n            }\n        };\n\n        return () => {\n            sessionStorage.setItem = originalSetItem;\n        };\n    }, [key]);\n\n    return trigger;\n};\n\nconst PDFRenderer = () => {\n    const [user] = useAuthState(auth);\n    const [loading, setLoading] = useState(true);\n    const [images, setImages] = useState([]);\n    const [error, setError] = useState(null);\n    const [open, setOpen] = useState(false);\n    const [file, setFile] = useState(null);\n\n    const storageChange = useSessionStorageListener(\"excelData\");\n\n    // Abrir y cerrar modal\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => {\n        setOpen(false);\n        setFile(null);\n        setError(null);\n    };\n\n    // Configuración de Dropzone\n    const { getRootProps, getInputProps } = useDropzone({\n        onDrop: (acceptedFiles) => {\n            const selectedFile = acceptedFiles[0];\n            if (selectedFile) {\n                setFile(selectedFile);\n            }\n        },\n        accept: \".xlsx\",\n        multiple: false,\n    });\n\n    const renderPdfFromUrl = async () => {\n        setLoading(true);\n        try {\n            const data = sessionStorage.getItem(\"excelData\");\n            // if (!data) {\n            //     // Abre el modal de ExcelUploaderStorage en lugar de mostrar el error\n            //     handleOpen();\n            //     setLoading(false);\n            //     return;\n            // }\n\n            // Si es null, asigna un valor ficticio\n            if (!data) {\n                const fakeData = JSON.stringify({ message: \"Valor ficticio\", data: [{\"a\":1}] });\n                sessionStorage.setItem(\"excelData\", fakeData);\n                data = fakeData;\n            }\n\n\n            const jsonData = JSON.parse(data);\n            const response = await axios.post(PDF_API_URL, jsonData, { responseType: \"arraybuffer\" });\n\n            if (response.status !== 200) {\n                setError(\"Error al obtener el PDF\");\n                return;\n            }\n\n            const pdfData = response.data;\n            const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;\n\n            if (!pdf || pdf.numPages === 0) {\n                setError(\"No se pudo cargar el PDF o no tiene páginas\");\n                return;\n            }\n\n            const pages = [];\n            for (let i = 1; i <= pdf.numPages; i++) {\n                const page = await pdf.getPage(i);\n                const viewport = page.getViewport({ scale: 2.5 });\n\n                const canvas = document.createElement(\"canvas\");\n                const context = canvas.getContext(\"2d\");\n                canvas.width = viewport.width;\n                canvas.height = viewport.height;\n\n                await page.render({ canvasContext: context, viewport }).promise;\n                pages.push(canvas.toDataURL(\"image/png\"));\n            }\n\n            setImages(pages);\n        } catch (err) {\n            setError(`Error: ${err.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        renderPdfFromUrl();\n    }, [storageChange]); // Actualizar cuando haya cambios en sessionStorage\n\n    const handleDownloadPdf = async () => {\n        setLoading(true); // Start loading state\n        try {\n            const data = sessionStorage.getItem(\"excelData\");\n            if (!data) {\n                setError(\"No hay datos en sessionStorage para descargar.\");\n                setLoading(false);\n                return;\n            }\n\n            const jsonData = JSON.parse(data);\n            const response = await axios.post(PDF_API_URL, jsonData, { responseType: \"arraybuffer\" });\n\n            if (response.status !== 200) {\n                setError(\"Error al obtener el PDF.\");\n                setLoading(false);\n                return;\n            }\n\n            // Process the blob for download\n            const pdfData = response.data;\n            const blob = new Blob([pdfData], { type: \"application/pdf\" });\n            const url = window.URL.createObjectURL(blob);\n\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"documento.pdf\"; // You can dynamically change the filename here if needed\n            link.click();\n\n            window.URL.revokeObjectURL(url); // Revoke the object URL after download\n            setLoading(false); // End loading state\n        } catch (err) {\n            setError(`Error al descargar el PDF: ${err.message}`);\n            setLoading(false); // End loading state\n        }\n    };\n\n    return (\n        <div>\n            {loading && <Typography align=\"center\">Cargando PDF...</Typography>}\n            {error && <Typography align=\"center\" color=\"error\">{error}</Typography>}\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\n                {images.map((image, index) => (\n                    <img\n                        key={index}\n                        src={image}\n                        alt={`PDF Page ${index + 1}`}\n                        style={{ width: \"100%\", borderRadius: \"8px\" }}\n                    // onClick={handleOpen}\n                    />\n                ))}\n            </Box>\n\n\n            <IconButton\n                onClick={handleOpen}\n                color=\"success\"\n                style={{\n                    position: 'fixed',\n                    top: '50%',\n                    right: '20px',\n                    backgroundColor: 'white',\n                    boxShadow: '0px 4px 6px rgba(0,0,0,0.1)',\n                    backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n                }}\n            >\n                <TuneIcon />\n            </IconButton>\n\n\n            <IconButton\n                onClick={handleDownloadPdf}\n                color=\"success\"\n                style={{\n                    position: \"fixed\",\n                    top: \"60%\",\n                    right: \"20px\",\n                    backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n                    boxShadow: \"0px 4px 6px rgba(0,0,0,0.1)\",\n                }}\n            >\n                <DownloadIcon />\n            </IconButton>\n            <ExcelUploaderStorage open={open} handleClose={handleClose} />\n        </div>\n    );\n};\n\nexport default PDFRenderer;\n","import React, { useState } from \"react\";\nimport {\n    Button,\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Link,\n    IconButton,\n} from \"@mui/material\";\nimport * as XLSX from \"xlsx\";\nimport TuneIcon from '@mui/icons-material/Tune';\n\nconst ExcelUploaderStorage = ({ open, handleOpen, handleClose }) => {\n    const [sheets, setSheets] = useState(null);\n    const [dragOver, setDragOver] = useState(false);\n\n    const handleFileUpload = (file) => {\n        if (!file) return;\n\n        // Limpia la clave 'excelData' de sessionStorage\n        sessionStorage.removeItem(\"excelData\");\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: \"array\" });\n            const sheetsData = {};\n\n            // Procesar cada hoja y convertirla en JSON\n            workbook.SheetNames.forEach((sheetName) => {\n                const sheet = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                    header: 1, // Mantiene la primera fila como encabezados\n                });\n\n                // Filtrar filas vacías\n                const filteredSheet = sheet.filter((row) =>\n                    row.some((cell) => cell !== null && cell !== undefined && cell !== \"\")\n                );\n\n                sheetsData[sheetName] = filteredSheet;\n            });\n\n            // Guardar los datos procesados en el estado y en sessionStorage\n            setSheets(sheetsData);\n            sessionStorage.setItem(\"excelData\", JSON.stringify(sheetsData));\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    const handleInputChange = (event) => {\n        const file = event.target.files[0];\n        handleFileUpload(file);\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault();\n        setDragOver(true);\n    };\n\n    const handleDragLeave = () => {\n        setDragOver(false);\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setDragOver(false);\n        const file = event.dataTransfer.files[0];\n        handleFileUpload(file);\n    };\n\n    return (\n        <Box sx={{ p: 2 }}>\n\n\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\n                <DialogTitle>Subir archivo Excel de parámetros</DialogTitle>\n                <DialogContent>\n                    <Box\n                        sx={{\n                            mt: 2,\n                            p: 2,\n                            border: \"2px dashed\",\n                            borderColor: dragOver ? \"primary.main\" : \"grey.400\",\n                            borderRadius: 2,\n                            textAlign: \"center\",\n                            backgroundColor: dragOver ? \"grey.100\" : \"transparent\",\n                        }}\n                        onDragOver={handleDragOver}\n                        onDragLeave={handleDragLeave}\n                        onDrop={handleDrop}\n                    >\n                        <Typography variant=\"body1\" gutterBottom>\n                            Arrastra y suelta tu archivo aquí o selecciona uno manualmente\n                        </Typography>\n                        <Button variant=\"contained\" component=\"label\">\n                            Seleccionar Archivo\n                            <input\n                                type=\"file\"\n                                hidden\n                                accept=\".xlsx, .xls\"\n                                onChange={handleInputChange}\n                            />\n                        </Button>\n                    </Box>\n                    <Box sx={{ mt: 2 }}>\n                        <Typography variant=\"body2\">\n                            ¿Necesitas una plantilla? Descárgala haciendo clic\n                            <Link href=\"/plantillasParametros/caes.xlsx\" download sx={{ ml: 1 }}>\n                                aquí\n                            </Link>\n                            .\n                        </Typography>\n                    </Box>\n                    {sheets && (\n                        <Box sx={{ mt: 2 }}>\n                            <Typography variant=\"subtitle1\">Hojas procesadas:</Typography>\n                            <ul>\n                                {Object.keys(sheets).map((sheetName) => (\n                                    <li key={sheetName}>{sheetName}</li>\n                                ))}\n                            </ul>\n                        </Box>\n                    )}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n};\n\nexport default ExcelUploaderStorage;\n","const config = {\n    // API_URL: \"http://0.0.0.0:8000\",\n    API_URL: \"https://caeserver.duckdns.org\",\n};\nexport default config;\n"],"names":["pdfjsLib","workerSrc","PDF_API_URL","concat","config","API_URL","Date","getTime","useSessionStorageListener","key","trigger","setTrigger","useState","useEffect","originalSetItem","sessionStorage","setItem","_len","arguments","length","args","Array","_key","apply","this","prev","PDFRenderer","user","useAuthState","auth","loading","setLoading","images","setImages","error","setError","open","setOpen","file","setFile","storageChange","getRootProps","getInputProps","useDropzone","onDrop","acceptedFiles","selectedFile","accept","multiple","async","data","getItem","fakeData","JSON","stringify","message","jsonData","parse","response","axios","post","responseType","status","pdfData","pdf","promise","numPages","pages","i","page","getPage","viewport","getViewport","scale","canvas","document","createElement","context","getContext","width","height","render","canvasContext","push","toDataURL","err","renderPdfFromUrl","_jsxs","children","_jsx","Typography","align","color","Box","display","flexDirection","alignItems","map","image","index","src","alt","style","borderRadius","IconButton","onClick","handleOpen","position","top","right","backgroundColor","boxShadow","TuneIcon","blob","Blob","type","url","window","URL","createObjectURL","link","href","download","click","revokeObjectURL","DownloadIcon","ExcelUploaderStorage","handleClose","_ref","sheets","setSheets","dragOver","setDragOver","handleFileUpload","removeItem","reader","FileReader","onload","e","Uint8Array","target","result","workbook","XLSX","sheetsData","SheetNames","forEach","sheetName","filteredSheet","sheet_to_json","Sheets","header","filter","row","some","cell","undefined","readAsArrayBuffer","sx","p","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","mt","border","borderColor","textAlign","onDragOver","event","preventDefault","onDragLeave","handleDragLeave","dataTransfer","files","variant","gutterBottom","Button","component","hidden","onChange","Link","ml","Object","keys","DialogActions"],"sourceRoot":""}